"use strict";var f=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var c=Object.prototype.hasOwnProperty;var l=(m,e)=>{for(var n in e)f(m,n,{get:e[n],enumerable:!0})},h=(m,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of g(e))!c.call(m,t)&&t!==n&&f(m,t,{get:()=>e[t],enumerable:!(r=o(e,t))||r.enumerable});return m};var x=m=>h(f({},"__esModule",{value:!0}),m);var d={};l(d,{NumberModule:()=>M});module.exports=x(d);var u=require("../../errors/faker-error"),s=require("../../internal/bind-this-to-member-functions");class M{constructor(e){this.faker=e;(0,s.bindThisToMemberFunctions)(this)}int(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=Number.MAX_SAFE_INTEGER}=e,t=Math.ceil(n),a=Math.floor(r);if(t===a)return t;if(a<t)throw r>=n?new u.FakerError(`No integer value between ${n} and ${r} found.`):new u.FakerError(`Max ${r} should be greater than min ${n}.`);const i=this.faker._mersenne.next();return Math.floor(i*(a+1-t)+t)}float(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=1,precision:t}=e;if(r===n)return n;if(r<n)throw new u.FakerError(`Max ${r} should be greater than min ${n}.`);if(t!==void 0){if(t<=0)throw new u.FakerError("Precision should be greater than 0.");const i=1/t;return this.int({min:n*i,max:r*i})/i}return this.faker._mersenne.next()*(r-n)+n}binary(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=1}=e;return this.int({max:r,min:n}).toString(2)}octal(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=7}=e;return this.int({max:r,min:n}).toString(8)}hex(e={}){typeof e=="number"&&(e={max:e});const{min:n=0,max:r=15}=e;return this.int({max:r,min:n}).toString(16)}bigInt(e={}){var b,i;(typeof e=="bigint"||typeof e=="number"||typeof e=="string"||typeof e=="boolean")&&(e={max:e});const n=BigInt((b=e.min)!=null?b:0),r=BigInt((i=e.max)!=null?i:n+BigInt(999999999999999));if(r===n)return n;if(r<n)throw new u.FakerError(`Max ${r} should be larger then min ${n}.`);const t=r-n,a=BigInt(this.faker.string.numeric({length:t.toString(10).length,allowLeadingZeros:!0}))%(t+BigInt(1));return n+a}}0&&(module.exports={NumberModule});
